{"ast":null,"code":"var _jsxFileName = \"/Users/garyjob/Applications/truesight_nfts/metaplex/js/packages/candy-machine-ui/src/MintButton.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { findGatewayToken, getGatewayTokenAddressForOwnerAndGatekeeperNetwork, onGatewayTokenChange, removeAccountChangeListener } from '@identity.com/solana-gateway-ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\n_c = CTAButton;\nexport const MintButton = _ref => {\n  _s();\n\n  let {\n    onMint,\n    candyMachine,\n    isMinting,\n    rpcUrl,\n    setIsMinting,\n    isActive\n  } = _ref;\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const {\n    requestGatewayToken,\n    gatewayStatus\n  } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }, this);\n    } else if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isPresale || candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isWhitelistOnly) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(connection.connection, webSocketSubscriptionId);\n      await onMint();\n      setClicked(false);\n      setVerified(false);\n    };\n\n    if (verified && clicked) {\n      mint();\n    }\n  }, [verified, clicked, connection.connection, onMint, webSocketSubscriptionId]);\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [GatewayStatus.NOT_REQUESTED, GatewayStatus.REFRESH_TOKEN_REQUIRED];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n\n    if (fromStates.find(state => previousGatewayStatus === state) && !invalidToStates.find(state => gatewayStatus === state)) {\n      setIsMinting(true);\n    }\n\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n  return /*#__PURE__*/_jsxDEV(CTAButton, {\n    disabled: isMinting || !isActive,\n    onClick: async () => {\n      if (candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper) {\n        const network = candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n\n        if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            await onMint();\n          } else {\n            // setIsMinting(true);\n            await requestGatewayToken();\n            console.log('after: ', gatewayStatus);\n          }\n        } else if (network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' || network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt') {\n          setClicked(true);\n          const gatewayToken = await findGatewayToken(connection.connection, wallet.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork);\n\n          if (gatewayToken !== null && gatewayToken !== void 0 && gatewayToken.isValid()) {\n            await onMint();\n          } else {\n            let endpoint = rpcUrl;\n            if (endpoint.endsWith('/')) endpoint = endpoint.slice(0, -1);\n            if (!endpoint.startsWith('https')) endpoint = 'https' + endpoint.slice(4);\n            window.open(`https://verify.encore.fans/?endpoint=${endpoint}&gkNetwork=${network}`, '_blank');\n            const gatewayTokenAddress = await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(wallet.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork);\n            setWebSocketSubscriptionId(onGatewayTokenChange(connection.connection, gatewayTokenAddress, () => setVerified(true), 'confirmed'));\n          }\n        } else {\n          setClicked(false);\n          throw new Error(`Unknown Gatekeeper Network: ${network}`);\n        }\n      } else {\n        await onMint();\n        setClicked(false);\n      }\n    },\n    variant: \"contained\",\n    children: getMintButtonContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintButton, \"r88RFSrNCKsjJvHHtLfbmAHGvyA=\", false, function () {\n  return [useWallet, useConnection, useGateway, usePrevious];\n});\n\n_c2 = MintButton;\n\nfunction usePrevious(value) {\n  _s2();\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n_s2(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CTAButton\");\n$RefreshReg$(_c2, \"MintButton\");","map":{"version":3,"sources":["/Users/garyjob/Applications/truesight_nfts/metaplex/js/packages/candy-machine-ui/src/MintButton.tsx"],"names":["styled","Button","CircularProgress","GatewayStatus","useGateway","useEffect","useState","useRef","useConnection","useWallet","findGatewayToken","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","onGatewayTokenChange","removeAccountChangeListener","CTAButton","MintButton","onMint","candyMachine","isMinting","rpcUrl","setIsMinting","isActive","wallet","connection","verified","setVerified","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","getMintButtonContent","state","isSoldOut","isPresale","isWhitelistOnly","mint","previousGatewayStatus","usePrevious","fromStates","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","console","log","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","gatewayToken","publicKey","isValid","endpoint","endsWith","slice","startsWith","window","open","gatewayTokenAddress","Error","value","ref","current"],"mappings":"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","sourcesContent":["import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  rpcUrl,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n  rpcUrl: string;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              let endpoint = rpcUrl;\n              if (endpoint.endsWith('/')) endpoint = endpoint.slice(0, -1);\n              if (!endpoint.startsWith('https'))\n                endpoint = 'https' + endpoint.slice(4);\n\n              window.open(\n                `https://verify.encore.fans/?endpoint=${endpoint}&gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}